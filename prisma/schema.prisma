// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum InvestmentType {
  INDIVIDUAL
  POOLED
  TIC
}

enum SaleType {
  SELL
  RENT
  LEASE
}

model User {
  id            String      @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  phoneNumber   String?
  address       String?
  zipCode       String?
  city          String?
  state         String?
  country       String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  properties    propertie[]

  rooms    ChatRoomMember[]
  messages Message[]
  images   ChatImage[]

  SubscriptionArchives   SubscriptionArchives?
  Subscription      Subscription?

  @@unique([email])
  @@map("user")
}

model SubscriptionArchives {
  id            String         @id @default(uuid())
  Subscriptions Subscription[]
  user User @relation(fields: [userId] , references: [id])
  userId String @unique
}

model Subscription {
  id String @id @default(uuid())

  stripeCustomerId     String?
  stripeSubscriptionId String?
  priceId              String? // Stripe Price ID
  status               String @default("active") // active | past_due | canceled | incomplete, etc.
  isActive             Boolean @default(false)

  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?

  cancelAtPeriodEnd Boolean   @default(false)
  canceledAt        DateTime? // optional, if user cancels

  planTier String @default("Free") // "Free" | "Deluxe" | "Premium", etc.

  nextStripeSubscriptionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId String  @unique

  SubscriptionArchives   SubscriptionArchives? @relation(fields: [subscriptionArchivesId], references: [id])
  subscriptionArchivesId String?
}

model externalInvestor {
  id                     String  @id @default(uuid())
  name                   String
  email                  String  @unique
  contributionPercentage Float // how much percentage does this user provide for the investment?
  returnPercentage       Float // the percentage returns for the investor
  isInternal             Boolean // is this user exist in our system or is an external user?
  accessRevoked          Boolean // the ability to revoke this user from being a partner
  dollarValueReturn      Float // the external investors return percentage in a dollar value

  investmentBlockId String
  investmentBlock   investmentBlock @relation(fields: [investmentBlockId], references: [id])
}

model investmentBlock {
  id               String         @id @default(uuid())
  //  General information that all type of investment will have
  typeOfInvestment InvestmentType @default(INDIVIDUAL) // Pooled / TIC , this are going to be the first two the rest will take more time to implement

  // this will be the coin investment 

  initialInvestment Float // How much money did the user buy this property?
  margin            Float // Profit percentage Based off the initial investment
  typeOfSale        SaleType @default(SELL) // Rent , Sell , Lease
  saleDuration      Int      @default(0) // duration for how long to get my money back from the investment

  // ------------------ Lease -------------------------
  leaseCycle Float  @default(0.0)
  leaseType  String @default("Month") // Lease candy every week , Every amount of months for  LeaseCycle , can be a certain amount of years plus months for  LeaseCycle

  finalResult Float @default(0.0) // The result for the investment

  discountPercentage Float @default(0) // Discount percentage for the property, if applicable

  propertieid       String             @unique
  propertie         propertie          @relation(fields: [propertieid], references: [id])
  externalInvestors externalInvestor[]

  @@unique([id])
}

model image {
  id           String   @id @default(uuid())
  name         String // The name of the image file
  url          String // The URL of the image
  size         Int // Size of the image in bytes
  type         String // Type of the image (e.g., "jpg", "png", "gif")
  lastModified BigInt // Last modified timestamp in milliseconds since epoch
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  thumbnail    Boolean // Whether this image is a thumbnail or not
  supabaseID   String // The ID of the image in Supabase storage, if applicable

  // Relationships
  propertyId String
  property   propertie @relation(fields: [propertyId], references: [id])
}

model propertie {
  id            String  @id @default(uuid())
  name          String
  address       String // The exact location with the ZIP Code and the general address
  description   String? @default("") // General description of the property.
  yearBuilt     Int     @default(2020) // The year the property was built. Helpful for valuation and depreciation.
  squareFootage Int     @default(0) // Useful for investors, renters, and comparative analysis.
  numBedrooms   Int     @default(0) // Common requirement for housing.
  numBathrooms  Int     @default(0) // Same as above.

  // Amenities and Features
  hasGarage Boolean  @default(false)
  hasGarden Boolean  @default(false)
  hasPool   Boolean  @default(false)
  amenities String[] // List of amenities (e.g., ["Elevator", "Gym", "Fireplace"]).

  lotSize       Float   @default(0) // Size of the property land, in square meters or feet.
  propertyType  String  @default("Apartment") // House, Apartment, Condo, Commercial, etc.
  status        String  @default("active") // active, pending, sold, etc.
  ownerName     String // Who currently owns the property.
  contactInfo   String // Contact details for inquiries.
  leavingstatus String  @default("Active") // Active ,Inactive , Renovation , Developing , Purchase Planning
  // Media
  images        image[] // Array of URLs or id  for property images. Everything will be processed by super bases. That's why it's just a array of strings.
  videoTourUrl  String? // Optional video tour.
  thobNialImgId String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accessCode String @db.VarChar(12) // this code is generated by the user that created the property I need to be used for other external users to access the property

  // Relationships

  userId      String
  user        User             @relation(fields: [userId], references: [id])
  investBlock investmentBlock?
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model ChatRoom {
  id           String           @id @default(uuid())
  title        String[] // this will be an arry of the two users name so you can switch depends on who is viewing it
  participants ChatRoomMember[]

  chats Message[]

  @@unique([id])
}

model Message {
  id        String      @id @default(uuid())
  room      ChatRoom    @relation(fields: [roomId], references: [id])
  roomId    String
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String
  text      String?
  createdAt DateTime    @default(now())
  images    ChatImage[]
}

model ChatRoomMember {
  id       String   @id @default(uuid())
  room     ChatRoom @relation(fields: [roomId], references: [id])
  roomId   String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  joinedAt DateTime @default(now())

  @@unique([roomId, userId])
}

model ChatImage {
  id           String   @id @default(uuid())
  name         String // The name of the image file
  url          String // The URL of the image
  size         Int // Size of the image in bytes
  type         String // Type of the image (e.g., "jpg", "png", "gif")
  lastModified BigInt // Last modified timestamp in milliseconds since epoch
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  thumbnail    Boolean // Whether this image is a thumbnail or not
  supabaseID   String // The ID of the image in Supabase storage, if applicable

  ChatRoomID  String // what chat room owns this image?
  chatOwnerID String // what user posted image

  message   Message @relation(fields: [messageId], references: [id])
  messageId String
  owner     User    @relation(fields: [ownerId], references: [id])
  ownerId   String
}
